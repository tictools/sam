{"ast":null,"code":"import utils from 'utils';\nconst validate = utils.validate;\nconst REACT_APP_API_URL = process.env.REACT_APP_API_URL;\n/**\n * Register a enrollment\n * \n * @param {String} school \n * @param {String} group \n * @param {String} shirt \n * @param {String} allergy \n * @param {String} illness \n * @param {String} medication \n * @param {String} observations \n * @param {Boolean} imageAuth \n * @param {Boolean} excursionAuth \n * @param {String} activity \n * @param {String} studentId \n * @param {String} weekOption1 \n * @param {Boolean} morningPerm1 \n * @param {Boolean} afternoonPerm1 \n * @param {Boolean} lunch1 \n * @param {String} weekOption2 \n * @param {Boolean} morningPerm2 \n * @param {Boolean} afternoonPerm2 \n * @param {Boolean} lunch2 \n * @param {String} weekOption3 \n * @param {Boolean} morningPerm3 \n * @param {Boolean} afternoonPerm3 \n * @param {Boolean} lunch3\n * @param {String} weekOption4 \n * @param {Boolean} morningPerm4 \n * @param {Boolean} afternoonPerm4 \n * @param {Boolean} lunch4 \n * \n * @returns {Promise} \n */\n\nexport default function (school, group, shirt, allergy, illness, medication, observations, imageAuth, excursionAuth, activity, studentId, weekOption1, morningPerm1, afternoonPerm1, lunch1, weekOption2, morningPerm2, afternoonPerm2, lunch2, weekOption3, morningPerm3, afternoonPerm3, lunch3, weekOption4, morningPerm4, afternoonPerm4, lunch4) {\n  validate.string(school, \"school\");\n  validate.string(group, \"group\");\n  validate.string(shirt, \"shirt\");\n  validate.observation(allergy, \"allergy\");\n  validate.observation(illness, \"illness\");\n  validate.observation(medication, \"medication\");\n  validate.observation(observations, \"observations\");\n  validate.string(imageAuth, \"image authorization\");\n  validate.string(excursionAuth, \"excursion authorization\");\n  validate.string(activity, \"activity\");\n  validate.string(studentId, \"student id\");\n  validate.string(weekOption1, \" week option 1\");\n  validate.string(morningPerm1, \"morning permanence 1\");\n  validate.string(afternoonPerm1, \"afternoon permanence 1\");\n  validate.string(lunch1, \"lunch 1\");\n  validate.string(weekOption2, \" week option 2\");\n  validate.string(morningPerm2, \"morning permanence 2\");\n  validate.string(afternoonPerm2, \"afternoon permanence 2\");\n  validate.string(lunch2, \"lunch 2\");\n  validate.string(weekOption3, \" week option 3\");\n  validate.string(morningPerm3, \"morning permanence 3\");\n  validate.string(afternoonPerm3, \"afternoon permanence 3\");\n  validate.string(lunch3, \"lunch 3\");\n  validate.string(weekOption4, \" week option 4\");\n  validate.string(morningPerm4, \"morning permanence 4\");\n  validate.string(afternoonPerm4, \"afternoon permanence 4\");\n  validate.string(lunch4, \"lunch 4\");\n  return (async () => {\n    const response = await fetch(\"\".concat(REACT_APP_API_URL, \"/enrollments\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        school,\n        group,\n        shirt,\n        allergy,\n        illness,\n        medication,\n        observations,\n        imageAuth,\n        excursionAuth,\n        activity,\n        studentId,\n        weekOption1,\n        morningPerm1,\n        afternoonPerm1,\n        lunch1,\n        weekOption2,\n        morningPerm2,\n        afternoonPerm2,\n        lunch2,\n        weekOption3,\n        morningPerm3,\n        afternoonPerm3,\n        lunch3,\n        weekOption4,\n        morningPerm4,\n        afternoonPerm4,\n        lunch4\n      })\n    });\n\n    if (response.status !== 200) {\n      const _ref = await response.json(),\n            error = _ref.error;\n\n      throw new Error(error);\n    } else {\n      return await response.json();\n    }\n  })();\n}","map":{"version":3,"sources":["/Users/jaume/Documents/sam/sam-app/src/logic/register-enrollment/index.js"],"names":["utils","validate","REACT_APP_API_URL","process","env","school","group","shirt","allergy","illness","medication","observations","imageAuth","excursionAuth","activity","studentId","weekOption1","morningPerm1","afternoonPerm1","lunch1","weekOption2","morningPerm2","afternoonPerm2","lunch2","weekOption3","morningPerm3","afternoonPerm3","lunch3","weekOption4","morningPerm4","afternoonPerm4","lunch4","string","observation","response","fetch","method","headers","body","JSON","stringify","status","json","error","Error"],"mappings":"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","sourcesContent":["import utils from 'utils'\n\nconst { validate } = utils\n\nconst REACT_APP_API_URL = process.env.REACT_APP_API_URL\n\n/**\n * Register a enrollment\n * \n * @param {String} school \n * @param {String} group \n * @param {String} shirt \n * @param {String} allergy \n * @param {String} illness \n * @param {String} medication \n * @param {String} observations \n * @param {Boolean} imageAuth \n * @param {Boolean} excursionAuth \n * @param {String} activity \n * @param {String} studentId \n * @param {String} weekOption1 \n * @param {Boolean} morningPerm1 \n * @param {Boolean} afternoonPerm1 \n * @param {Boolean} lunch1 \n * @param {String} weekOption2 \n * @param {Boolean} morningPerm2 \n * @param {Boolean} afternoonPerm2 \n * @param {Boolean} lunch2 \n * @param {String} weekOption3 \n * @param {Boolean} morningPerm3 \n * @param {Boolean} afternoonPerm3 \n * @param {Boolean} lunch3\n * @param {String} weekOption4 \n * @param {Boolean} morningPerm4 \n * @param {Boolean} afternoonPerm4 \n * @param {Boolean} lunch4 \n * \n * @returns {Promise} \n */\n\nexport default function(school , group , shirt , allergy , illness , medication ,  observations , imageAuth , excursionAuth , activity , studentId , weekOption1, morningPerm1 , afternoonPerm1 , lunch1 , weekOption2 , morningPerm2 , afternoonPerm2 , lunch2 , weekOption3 , morningPerm3 , afternoonPerm3 , lunch3 , weekOption4 , morningPerm4 , afternoonPerm4 , lunch4){\n\n    validate.string( school , \"school\")\n    validate.string( group , \"group\")\n    validate.string( shirt , \"shirt\")\n    validate.observation( allergy , \"allergy\")\n    validate.observation( illness , \"illness\")\n    validate.observation( medication , \"medication\")\n    validate.observation( observations , \"observations\")\n    validate.string( imageAuth , \"image authorization\")\n    validate.string( excursionAuth , \"excursion authorization\")\n    validate.string( activity , \"activity\")\n    validate.string( studentId , \"student id\")\n    \n    validate.string( weekOption1 , \" week option 1\")\n    validate.string( morningPerm1 , \"morning permanence 1\")\n    validate.string( afternoonPerm1 , \"afternoon permanence 1\")\n    validate.string( lunch1 , \"lunch 1\")\n    \n    validate.string( weekOption2 , \" week option 2\")\n    validate.string( morningPerm2 , \"morning permanence 2\")\n    validate.string( afternoonPerm2 , \"afternoon permanence 2\")\n    validate.string( lunch2 , \"lunch 2\")\n    \n    validate.string( weekOption3 , \" week option 3\")\n    validate.string( morningPerm3 , \"morning permanence 3\")\n    validate.string( afternoonPerm3 , \"afternoon permanence 3\")\n    validate.string( lunch3 , \"lunch 3\")\n    \n    validate.string( weekOption4 , \" week option 4\")\n    validate.string( morningPerm4 , \"morning permanence 4\")\n    validate.string( afternoonPerm4 , \"afternoon permanence 4\")\n    validate.string( lunch4 , \"lunch 4\")\n    \n    return(async () => {\n        const response = await fetch(`${REACT_APP_API_URL}/enrollments` , {\n            method: 'POST',\n            headers: {'content-type' : 'application/json'},\n            body: JSON.stringify({ school , group , shirt , allergy , illness , medication ,  observations , imageAuth , excursionAuth , activity , studentId , weekOption1, morningPerm1 , afternoonPerm1 , lunch1 , weekOption2 , morningPerm2 , afternoonPerm2 , lunch2 , weekOption3 , morningPerm3 , afternoonPerm3 , lunch3 , weekOption4 , morningPerm4 , afternoonPerm4 , lunch4 })\n        })\n        if(response.status !== 200){\n            const { error } = await response.json()\n            throw new Error (error)\n        }else{\n            return await response.json()\n        }\n    })()\n    \n    \n    \n    \n}"]},"metadata":{},"sourceType":"module"}