{"ast":null,"code":"import utils from 'utils';\nconst validate = utils.validate;\nconst REACT_APP_API_URL = process.env.REACT_APP_API_URL;\n/**\n * Register a tutor\n * \n * @param {string} name \n * @param {string} surname \n * @param {string} dni \n * @param {string} phone1 \n * @param {string} email \n * @param {string} password \n * @param {string} repassword \n * \n * @returns {Promise}\n */\n\nexport default function (name, surname, dni, phone1, email, password, repassword) {\n  validate.string(name, 'name');\n  validate.alphabetic(name, 'name');\n  validate.string(surname, 'surname');\n  validate.alphabetic(surname, 'surname');\n  validate.string(dni, 'dni');\n  validate.string(phone1, 'phone1');\n  validate.string(email, 'email');\n  validate.email(email, 'email');\n  validate.string(password, 'password');\n  validate.string(repassword, 'repassword');\n  if (password !== repassword) throw new Error(\"passwords don't match\");\n  return (async () => {\n    const response = await fetch(\"\".concat(REACT_APP_API_URL, \"/tutors\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        surname,\n        dni,\n        phone1,\n        email,\n        password\n      })\n    });\n\n    if (response.status !== 201) {\n      const _ref = await response.json(),\n            error = _ref.error;\n\n      throw Error(error);\n    } else {\n      return await response.json();\n    }\n  })();\n}","map":{"version":3,"sources":["/Users/jaume/Documents/sam/sam-app/src/logic/register-tutor/index.js"],"names":["utils","validate","REACT_APP_API_URL","process","env","name","surname","dni","phone1","email","password","repassword","string","alphabetic","Error","response","fetch","method","headers","body","JSON","stringify","status","json","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;MAEQC,Q,GAAaD,K,CAAbC,Q;AAER,MAAMC,iBAAiB,GAAGC,OAAO,CAACC,GAAR,CAAYF,iBAAtC;AAEA;;;;;;;;;;;;;;AAcA,eAAe,UAAUG,IAAV,EAAiBC,OAAjB,EAA2BC,GAA3B,EAAiCC,MAAjC,EAA0CC,KAA1C,EAAiDC,QAAjD,EAA4DC,UAA5D,EAAwE;AAEnFV,EAAAA,QAAQ,CAACW,MAAT,CAAgBP,IAAhB,EAAsB,MAAtB;AACAJ,EAAAA,QAAQ,CAACY,UAAT,CAAoBR,IAApB,EAA2B,MAA3B;AACAJ,EAAAA,QAAQ,CAACW,MAAT,CAAgBN,OAAhB,EAAyB,SAAzB;AACAL,EAAAA,QAAQ,CAACY,UAAT,CAAoBP,OAApB,EAA8B,SAA9B;AACAL,EAAAA,QAAQ,CAACW,MAAT,CAAgBL,GAAhB,EAAqB,KAArB;AACAN,EAAAA,QAAQ,CAACW,MAAT,CAAgBJ,MAAhB,EAAwB,QAAxB;AACAP,EAAAA,QAAQ,CAACW,MAAT,CAAgBH,KAAhB,EAAuB,OAAvB;AACAR,EAAAA,QAAQ,CAACQ,KAAT,CAAeA,KAAf,EAAsB,OAAtB;AACAR,EAAAA,QAAQ,CAACW,MAAT,CAAgBF,QAAhB,EAA0B,UAA1B;AACAT,EAAAA,QAAQ,CAACW,MAAT,CAAgBD,UAAhB,EAA4B,YAA5B;AAEA,MAAGD,QAAQ,KAAKC,UAAhB,EAA4B,MAAM,IAAIG,KAAJ,CAAW,uBAAX,CAAN;AAE5B,SAAO,CAAC,YAAY;AAChB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,WAAId,iBAAJ,cAAgC;AACxDe,MAAAA,MAAM,EAAE,MADgD;AAExDC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAF+C;AAGxDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEhB,QAAAA,IAAF;AAASC,QAAAA,OAAT;AAAmBC,QAAAA,GAAnB;AAAyBC,QAAAA,MAAzB;AAAkCC,QAAAA,KAAlC;AAAyCC,QAAAA;AAAzC,OAAf;AAHkD,KAAhC,CAA5B;;AAKA,QAAIK,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AAAA,mBACP,MAAMP,QAAQ,CAACQ,IAAT,EADC;AAAA,YACjBC,KADiB,QACjBA,KADiB;;AAEzB,YAAMV,KAAK,CAACU,KAAD,CAAX;AACH,KAHD,MAIK;AACD,aAAO,MAAMT,QAAQ,CAACQ,IAAT,EAAb;AACH;AACJ,GAbM,GAAP;AAcH","sourcesContent":["import utils from 'utils'\n\nconst { validate } = utils\n\nconst REACT_APP_API_URL = process.env.REACT_APP_API_URL\n\n/**\n * Register a tutor\n * \n * @param {string} name \n * @param {string} surname \n * @param {string} dni \n * @param {string} phone1 \n * @param {string} email \n * @param {string} password \n * @param {string} repassword \n * \n * @returns {Promise}\n */\n\nexport default function (name , surname , dni , phone1 , email, password , repassword) {\n    \n    validate.string(name, 'name')\n    validate.alphabetic(name , 'name')\n    validate.string(surname, 'surname')\n    validate.alphabetic(surname , 'surname')\n    validate.string(dni, 'dni')\n    validate.string(phone1, 'phone1')\n    validate.string(email, 'email')\n    validate.email(email, 'email')\n    validate.string(password, 'password')\n    validate.string(repassword, 'repassword')\n    \n    if(password !== repassword) throw new Error (\"passwords don't match\")\n\n    return (async () => {\n        const response = await fetch(`${REACT_APP_API_URL}/tutors`, {\n            method: 'POST',\n            headers: { 'content-type': 'application/json' },\n            body: JSON.stringify({ name , surname , dni , phone1 , email, password })\n        })\n        if (response.status !== 201) {\n            const { error } = await response.json()\n            throw Error(error)\n        }\n        else {\n            return await response.json()\n        }   \n    })()\n}"]},"metadata":{},"sourceType":"module"}